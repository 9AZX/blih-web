{
  "_args": [
    [
      {
        "raw": "vanilla-modal",
        "scope": null,
        "escapedName": "vanilla-modal",
        "name": "vanilla-modal",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/saumon/web/blih-web"
    ]
  ],
  "_from": "vanilla-modal@latest",
  "_id": "vanilla-modal@1.6.4",
  "_inCache": true,
  "_location": "/vanilla-modal",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/vanilla-modal-1.6.4.tgz_1485449567666_0.6836989482399076"
  },
  "_npmUser": {
    "name": "benceg",
    "email": "bceglowski@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vanilla-modal",
    "scope": null,
    "escapedName": "vanilla-modal",
    "name": "vanilla-modal",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vanilla-modal/-/vanilla-modal-1.6.4.tgz",
  "_shasum": "aec1933f5a3e33256f353c4c755eade37cd22414",
  "_shrinkwrap": null,
  "_spec": "vanilla-modal",
  "_where": "/home/saumon/web/blih-web",
  "author": {
    "name": "Ben Ceglowski",
    "email": "bceglowski@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/thephuse/vanilla-modal/issues"
  },
  "dependencies": {},
  "description": "A dependency-free CSS-driven plain JavaScript modal written in ECMAScript 2015.",
  "devDependencies": {
    "babel-cli": "^6.8.0",
    "babel-eslint": "^7.1.1",
    "babel-plugin-rename-umd-globals": "^1.0.0",
    "babel-plugin-transform-class-properties": "^6.19.0",
    "babel-plugin-transform-es2015-modules-umd": "^6.8.0",
    "babel-plugin-transform-flow-strip-types": "^6.21.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-1": "^6.16.0",
    "eslint": "^3.13.1",
    "eslint-config-airbnb-base": "^11.0.1",
    "eslint-plugin-import": "^2.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "aec1933f5a3e33256f353c4c755eade37cd22414",
    "tarball": "https://registry.npmjs.org/vanilla-modal/-/vanilla-modal-1.6.4.tgz"
  },
  "gitHead": "180bef9057d1a49dfae03be0eda4d9e044919089",
  "homepage": "https://github.com/thephuse/vanilla-modal",
  "keywords": [
    "modal",
    "ecmascript",
    "harmony",
    "es6",
    "es2015"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "benceg",
      "email": "bceglowski@gmail.com"
    }
  ],
  "name": "vanilla-modal",
  "optionalDependencies": {},
  "readme": "# Vanilla Modal\n\n[![npm version](https://badge.fury.io/js/vanilla-modal.svg)](https://www.npmjs.com/package/vanilla-modal)\n\n[See the demo.](http://thephuse.github.io/vanilla-modal)\n\n### A tiny, flexible, completely dependency-free CSS-powered JavaScript modal.\n\nWritten in ECMAScript 2015 and transpiled for universal use with Babel 6.\n\nContributions welcome.\n\n\n> ### Please be aware of recent breaking changes.\n>\n> #### If importing using a `<script/>` tag\n> `new VanillaModal()` will now be `new VanillaModal.default()`. This is due to the way in which Babel 6\n> handles default exports.\n>\n> #### The semantically-unsound `[rel=\"modal:open\"]` and `[rel=\"modal:close\"]` default listeners have been deprecated\n> They have been replaced by `[data-modal-open]` and `[data-modal-close]`.\n> Please update your codebase if you were not supplying `open` or `close` parameters to the modal.\n\n\n## License\n\n[MIT](https://github.com/thephuse/vanilla-modal/blob/master/LICENSE). Please feel free to offer any assistance - pull requests, bug tracking, suggestions are all welcome. The issue tracker is over [here](https://github.com/thephuse/vanilla-modal/issues).\n\n\n## Q & A\n\n#### Why?\n\nI was pretty fed up looking for a modal script that wasn't variously:\n\na) Bloated.\nb) Inaccessible.\nc) Needlessly complicated.\nd) Riddled with third party dependencies (here's looking at you, jQuery).\ne) Trying to hijack beautiful hardware-accelerated CSS transitions using JavaScript.\n\n#### Can I integrate this with a single page app framework?\n\nSince the modal's `open` and `close` event listeners are delegated from the document, you can use this script with any client-side routing or DOM-affecting framework.\n\nIf you're concerned about garbage collection, you may be pleased to know there's a `modal.destroy()` method baked in, which removes all internal events and references.\n\n## Usage and Examples\n\n#### 1. Install the script.\n\n* Using NPM:\n  ```sh\n  npm install vanilla-modal --save\n  ```\n\n* Using Bower:\n  ```sh\n  bower install vanilla-modal --save\n  ```\n\n#### 2. Include the script in your project.\n\n* The script is compiled using UMD module declarations. Use it with Webpack, Browserify, RequireJS or by simply including a `<script>` tag.\n\n* ES 2015\n  ```javascript\n  import VanillaModal from 'vanilla-modal';\n  ```\n\n* CommonJS:\n\t```javascript\n\tconst VanillaModal = require('vanilla-modal');\n\t```\n\n* AMD\n\t```javascript\n\trequire(['/node_modules/vanilla-modal/dist/index.js'], function(VanillaModal) {\n    const vanillaModal = new VanillaModal();\n  });\n\t```\n\n* Browser\n\t```html\n\t<script src=\"/node_modules/vanilla-modal/dist/index.js\"></script>\n  <script>var vanillaModal = new VanillaModal.default()</script>\n\t```\n\n#### 3. Create the modal's container using HTML.\n\nThis part is important. *Vanilla Modal* doesn't use any template strings or DOM building algorithms (although this is on the roadmap for version 2).\n\nAs a result, you will need to add your modal's _container_ HTML to your document - by using JavaScript ahead of the modal's instantiation, or by writing HTML into your document.\n\nThe payoff is that you can make the modal look any way you wish.\n\n```html\n<div class=\"modal\">\n  <div class=\"modal-inner\">\n    <a data-modal-close>Close</a>\n    <div class=\"modal-content\"></div>\n  </div>\n</div>\n```\n\nFollowing this, create some off-screen containers to house your modal's content. Give each an ID to make them selectable via anchor elements, and accessible using JavaScript-disabled browsers.\n\nThe modal will pick up the contents that are _inside_ the container with the ID specified by the triggering anchor's `href` attribute. It will place them in the `modalContent` container specified by your settings object. In the example above, the default container class of `.modal-content` is used.\n\n```html\n<div id=\"modal-1\" class=\"modal-hider\">Modal 1 content</div>\n<div id=\"modal-2\" class=\"modal-hider\">Modal 2 content</div>\n```\n\n> Note: Vanilla Modal applies the class specified by `loadClass` to the `page` element.\n  Both are specified in settings, and default respectively to `vanilla-modal` and `body`.\n  This is done in order to make the modal as accessible as possible for all use cases.\n\n```html\n<style type=\"text/css\">\n  body.vanilla-modal .modal-hider {\n    position: absolute;\n    left: -99999em;\n  }\n</style>\n```\n\n#### 4. Create a VanillaModal instance.\n\n```javascript\nconst modal = new VanillaModal(options);\n```\n\n> (Where `options` is a configuration hash. The full list of options, as well as their defaults, are listed below under the \"Options and Defaults\" heading.)\n\n\n#### 5. Add your own CSS rules.\n\n[Here's the demo's stylesheet](http://thephuse.github.io/vanilla-modal/modal.css).\n\nVanilla Modal handles display logic using CSS. Hardware acceleration via CSS transforms comes highly recommended, for a smooth device-agnostic experience.\n\nTwo things to keep in mind:\n\n* Using `display: none;` on any element will efface transitions you might otherwise wish to use.\n\n* Whatever property you're using when closing the modal (`z-index` in the example below) will need a `transition-length` of `0` and a `transition-delay` property of the length of the longest other transition. This prevents the modal's obfuscating property from kicking in ahead of the closing animation (e.g. changing the `z-index` before the `opacity` animation has played out).\n\n```\ntransition: opacity 0.2s, z-index 0s 0.2s;\n```\n\n\n#### 6. Delegation and Built-in Methods\n\nDefault delegate targets are as follows:\n\n* `[data-modal-open]` triggers `modal.open()`.\n\n* `[data-modal-close]` triggers `modal.close()`.\n\nExamples follow:\n\nThe following element will open `#modal-1` using VanillaModal.\n\n```html\n<a href=\"#modal-1\" data-modal-open>Modal 1</a>\n```\n\nThe element below will close the modal.\n\n```html\n<a data-modal-close>Close</a>\n```\n\nThese defaults can easily be changed at instantiation:\n\n```js\nconst modal = new VanillaModal({\n  open: '.my-open-class',\n  close: '.my-close-class'\n});\n```\n\n\n#### 7. Programmatically opening a modal\n\nIf you need to open the modal automatically, you can do so by passing a DOM ID string to the `open()` function.\n\nFor example:\n\n```js\nconst modal = new VanillaModal();\nmodal.open('#foo');\n```\n\nThe modal can likewise be closed programmatically using the `close()` method.\n\n\n## VanillaModal Public Properties\n\n* `{Object} $`\n\n  A hash of DOM nodes used internally by the modal.\n  Useful if at any stage the modal's container needs to change.\n\n* `{Object} $$`\n\n  The modal's settings object.\n\n* `{Boolean} isOpen`\n\n  `true` if the modal is open.\n\n* `{Node} current`\n\n  The DOM node currently displayed in the modal. `null` if not set.\n\n* `{Function} close()`\n\n  The modal's callable `close` method.\n\n* `{Function} open(String)`\n\n  The modal's callable `open` method.\n  This requires the passed DOM ID target to be present on the page.\n\n* `{Function} destroy()`\n\n  Closes the modal and removes all event listeners and internal references.\n  This releases an instantiated modal to the next garbage collection cycle.\n\n\n## Options and Defaults\n\nThe options object contains DOM selector strings and bindings.\nDefaults are overridden by providing an `options` object to a new VanillaModal instance.\n\n> Note: this API is feature-frozen for the 1.x release, but subject to change at 2.x.\n\n#### Defaults:\n\n```js\n{\n  modal: '.modal',\n  modalInner: '.modal-inner',\n  modalContent: '.modal-content',\n  open: '[data-modal-open]',\n  close: '[data-modal-close]',\n  page: 'body',\n  loadClass: 'vanilla-modal',\n  class: 'modal-visible',\n  clickOutside: false,\n  closeKeys: [27],\n  transitions: true,\n  onBeforeOpen: null,\n  onBeforeClose: null,\n  onOpen: null,\n  onClose: null\n}\n```\n\n* `{String} modal`\n\n  The class of the outer modal container. This is usually a fixed position element that takes up the whole screen.\n  It doesn't have to be, though - the modal can take the form of a toast popup, for example, or any type of overlay you can think of.\n\n* `{String} modalInner`\n\n  The inner container of the modal.\n  This usually houses a close button at the very least (see HTML above).\n  It should also contain the `modalContent` element.\n\n* `{String} modalContent`\n\n  The container used to house the modal's content when it's transferred to the modal.\n  This must be a child of `modalInner`.\n\n* `{String} open`\n\n  The selector to bind the `open()` event to.\n\n* `{String} close`\n\n  The selector to bind the `close()` event to.\n\n* `{String} page`\n\n  The outermost DOM selector to apply the `loadClass` and `class` classes to.\n  This is `body` by default but could just as easily be `html` or `main` in any common web app.\n\n* `{String} loadClass`\n\n  The class to apply to the `page` DOM node at the moment the script loads.\n\n* `{String} class`\n\n  The class to apply to the `parent` container when the modal is open.\n\n* `{Boolean} clickOutside`\n\n  If set to `true`, a click in the area outside the `modalInner` container will fire a `close()` event.\n\n* `{Array} closeKeys`\n\n  Hitting any keycodes contained within this array while the modal is open will fire a `close()` event.\n  Set this to `false` or an empty array to disable keyboard modal closure. Defaults to [27], which is `esc` on a traditional keyboard.\n\n* `{Boolean} transitions`\n\n  If set to `false`, the modal will treat every browser like IE 9 and ignore transitions when opening and closing.\n\n* `{Function} onBeforeOpen`\n  `{Function} onBeforeClose`\n  `{Function} onOpen`\n  `{Function} onClose`\n\n  Hooks that fire before their respective events. These are context-bound to the VanillaModal instance, and receive their triggering events (e.g. `click` or `keydown`) as its only arguments.\n\n\n## Compatibility\n\nThis script works in the evergreen mobile & desktop browsers, as well as IE 11, 10, and 9 (the last has no support for transitions).\n\nIt is not compatible with Opera Mini or the Blackberry browser, and there are currently no plans afoot to support either.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thephuse/vanilla-modal.git"
  },
  "scripts": {
    "compile": "babel ./index.js --out-file ./dist/index.js",
    "watch": "babel --watch ./index.js --out-file ./dist/index.js"
  },
  "version": "1.6.4"
}
